getwd()
check()
devtools::check()
use_mit_license()
devtools::use_mit_license()
??use_mit_license()
usethis::use_mit_license()
?use_packagge()
?use_package()
library(usethis)
use_package(Seurat, type = "Imports")
use_package("Seurat", type = "Imports")
use_package("biomaRt", type = "Depends")
devtools::check()
use_package("biomaRt", type = "Imports")
devtools::check()
usethis::use_github_links()
usethis::use_tidy_description()
usethis::use_package("dplyr", min_version = TRUE)
usethis::use_package("ape", min_version = TRUE)
usethis::use_package("biomaRt", min_version = TRUE)
usethis::use_package("cgdsr", min_version = TRUE)
usethis::use_package("clusterProfiler", min_version = TRUE)
usethis::use_package("factoextra", min_version = TRUE)
usethis::use_package("forcats", min_version = TRUE)
usethis::use_package("ggplot2", min_version = TRUE)
usethis::use_package("gplots", min_version = TRUE)
usethis::use_package("org.Hs.eg.db", min_version = TRUE)
usethis::use_package("org.Mm.eg.db", min_version = TRUE)
usethis::use_package("scico", min_version = TRUE)
usethis::use_package("Seurat", min_version = TRUE)
usethis::use_package("tidyr", min_version = TRUE)
usethis::use_package("base", min_version = TRUE)
usethis::use_package("utils", min_version = TRUE)
usethis::use_package("stats", min_version = TRUE)
usethis::use_package_doc()
usethis::use_import_from("Seurat", "RunUMAP")
use_import_from(?)
?use_import_from()
usethis::use_import_from("Seurat", c("RunUMAP", "UMAPPlot"))
usethis::use_import_from(ggplot2)
usethis::use_import_from("ggplot2")
usethis::use_import_from("ape", "as.phylo")
usethis::use_import_from("biomaRt", c("getLDS", "useMart"))
usethis::use_import_from("cgdsr", c("CGDS", "getProfileData"))
usethis::use_import_from("clusterProfiler", c("enrichGO"))
usethis::use_import_from("dplyr", c("arrange", "distinct", "mutate", "pull"))
usethis::use_import_from("factoextra", c("eclust", "fviz_dend"))
usethis::use_import_from("forcats", c("fct_reorder"))
usethis::use_import_from("ggplot2", c("coord_flip", "element_text", "geom_bar", "geom_hline", "scale_fill_gradient", "theme", "theme_bw"))
usethis::use_import_from("ggplot2", c("coord_flip", "element_text", "geom_bar", "geom_hline", "scale_fill_gradient2", "theme", "theme_bw"))
usethis::use_import_from("gplots", c("heatmap.2"))
usethis::use_import_from("grDevices", c("colorRampPalette"))
usethis::use_import_from("scico", c("scico"))
usethis::use_import_from("stats", c("hclust", "dist"))
usethis::use_import_from("tidyr", c("as_tibble"))
org.Hs.eg.db
?col2rgb
usethis::use_import_from("grDevices", c("col2rgb"))
?rgb
usethis::use_import_from("grDevices", c("rgb"))
?apply
?dev.copy
usethis::use_import_from("grDevices", c("dev.copy", "dev.off"))
?pdf
usethis::use_import_from("grDevices", c("pdf"))
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise()
check()
usethis::check()
devtools::check()
?abline
usethis::use_import_from("graphics", c("abline", "axis", "box", "lines", "mtext",
"par", "title"))
usethis::use_import_from("stats", c("cor", "cor.test", "median", "p.adjust"))
usethis::use_import_from("utils", c("head"))
?%>%
?NoLegend
usethis::use_import_from("Seurat", c("NoLegend"))
?utils
magrittr::`%>%`()
devtools::document()
devtools::document()
library(ggplot2)
devtools::document()
install.packages("ggplot2")
install.packages("ggplot2")
devtools::document()
roxygen2::roxygenise()
devtools::document()
devtools::create
?devtools::create
usethis::use_package("magrittr")
?desc
desc()
?plot
?points
graphics::plot()
graphics::text()
graphics::lines()
?geom_encircle
??geom_encircle
??geom_text_repel
usethis::use_import_from("ggrepel", c("geom_text_repel"))
usethis::use_import_from("ggrepel", c("geom_text_repel"))
??geom_encircle
usethis::use_import_from("ggalt", c("geom_encircle"))
??geom_label_repel
usethis::use_import_from("ggrepel", c("geom_label_repel"))
col2rgb
rgb
install.packages("covr")
library(corv)
library(covr)
report()
usethis::use_testthat(3)
usethis::use_test("makeTransparent")
makeTransparent <- function(color, percent = 50, name = NULL) {
if(percent<0 | percent>100) stop("percent must be between 0 and 100")
## Get RGB values for named color
rgb.val <- grDevices::col2rgb(color)
# Make new color using input color as base and alpha set by percent variable
new.col <- grDevices::rgb(rgb.val[1], rgb.val[2], rgb.val[3],
max = 255,
alpha = (100 - percent) * 255 / 100,
names = name)
# return new color
return(new.col)
}
makeTransparent
makeTransparent("red")
devtools::load_all()
rm(list = ls())
devtools::load_all()
testthat::test_file("tests/testthat/test-makeTransparent.R")
devtools::test()
report()
makeTransparent("red")
devtools::load_all()
?usefulfunctions::makeTransparent()
?read.csv
devtools::load_all()
library(usefulfunctions)
devtools::load_all()
devtools::load_all()
convert.human.to.mouse <- function(genes, use.jax = FALSE){
if(use.jax){
mouse_human_genes = read.csv("http://www.informatics.jax.org/downloads/reports/HOM_MouseHumanSequence.rpt",sep="\t")
output.df = c()
for(gene.i in genes){
class_key = (mouse_human_genes %>% filter(Symbol == gene.i & Common.Organism.Name=="human"))[['DB.Class.Key']]
if(!identical(class_key, integer(0)) ){
mouse_genes = (mouse_human_genes %>% filter(DB.Class.Key == class_key & Common.Organism.Name=="mouse, laboratory"))[,"Symbol"]
for(mouse_gene in mouse_genes){
output.df = append(output.df, mouse_gene)
}
}
}
print(head(output.df))
return(output.df)
}else{
human <- biomaRt::useMart("ensembl",
dataset = "hsapiens_gene_ensembl")
mouse <- biomaRt::useMart("ensembl",
dataset = "mmusculus_gene_ensembl")
genes.new <- biomaRt::getLDS(attributes = c("hgnc_symbol"),
filters = "hgnc_symbol",
values = genes,
mart = human,
attributesL = c("mgi_symbol"),
martL = mouse,
uniqueRows=T)
output.df <- genes.new %>%
dplyr::distinct(.data$HGNC.symbol, .keep_all = TRUE) %>%
dplyr::distinct(.data$MGI.symbol, .keep_all = TRUE)
print(head(output.df))
return(output.df)
}
}
usethis::use_import_from("utils", c("read.csv"))
?append
usethis::use_import_from("utils", c("read.csv"))
devtools::load_all()
library(usefulfunctions)
usefulfunctions::convert.human.to.mouse
assign
library(usefulfunctions)
